# PIPELINE DEFINITION
# Name: diabetes-predictor-training-pipeline
# Inputs:
#    data_bucket: str
#    dataset_uri: str
#    model_repo: str
#    project_id: str
#    thresholds_dict_str: str
# Outputs:
#    lr-model-evaluation-kpi: system.Metrics
#    lr-model-evaluation-metrics: system.ClassificationMetrics
components:
  comp-condition-1:
    dag:
      tasks:
        upload-model-to-gcs:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-lr-model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs
    inputDefinitions:
      artifacts:
        pipelinechannel--train-lr-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--lr-model-evaluation-approval:
          parameterType: BOOLEAN
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-importer:
    executorLabel: exec-importer
    inputDefinitions:
      parameters:
        uri:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-lr-model-evaluation:
    executorLabel: exec-lr-model-evaluation
    inputDefinitions:
      artifacts:
        model_lr:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_set:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        thresholds_dict_str:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        kpi:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        metrics:
          artifactType:
            schemaTitle: system.ClassificationMetrics
            schemaVersion: 0.0.1
      parameters:
        approval:
          parameterType: BOOLEAN
  comp-train-lr:
    executorLabel: exec-train-lr
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
  comp-train-test-split:
    executorLabel: exec-train-test-split
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        dataset_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        dataset_train:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-importer:
      importer:
        artifactUri:
          runtimeParameter: uri
        typeSchema:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    exec-lr-model-evaluation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - lr_model_evaluation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ 'numpy' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef lr_model_evaluation(\n    test_set:  Input[Dataset],\n    model_lr:\
          \ Input[Model],\n    thresholds_dict_str: str,\n    metrics: Output[ClassificationMetrics],\n\
          \    kpi: Output[Metrics]\n) -> NamedTuple('outputs', approval=bool):\n\n\
          \    import pandas as pd\n    import logging     \n    from sklearn.metrics\
          \ import roc_curve, confusion_matrix, accuracy_score\n    import json\n\
          \    import typing\n    import pickle\n    from numpy import nan_to_num\n\
          \n    def threshold_check(val1, val2):\n        cond = False\n        if\
          \ val1 >= val2 :\n            cond = True\n        return cond\n\n    data\
          \ = pd.read_csv(test_set.path+\".csv\")\n\n     #Loading the saved model\
          \ with joblib\n    m_filename = model_lr.path + \".pkl\"\n    model = pickle.load(open(m_filename,\
          \ 'rb'))\n\n    y_test = data.drop(columns=[\"class\"])\n    y_target =\
          \ data['class']\n    y_pred = model.predict(y_test)    \n\n    y_scores\
          \ =  model.predict_proba(data.drop(columns=[\"class\"]))[:, 1]\n\n    fpr,\
          \ tpr, thresholds = roc_curve(\n         y_true=data['class'], y_score=y_scores,\
          \ pos_label=True\n    )\n\n    thresholds = nan_to_num(thresholds)   \n\
          \    metrics.log_roc_curve(fpr, tpr, thresholds)  \n\n    metrics.log_confusion_matrix(\n\
          \        ['Negative', 'Positive'],\n         confusion_matrix(\n       \
          \    data['class'], y_pred\n       ).tolist(), \n    )\n\n    accuracy =\
          \ accuracy_score(data['class'], y_pred.round())\n    thresholds_dict  =\
          \ json.loads(thresholds_dict_str)\n    model_lr.metadata[\"accuracy\"] =\
          \ float(accuracy)\n    kpi.log_metric(\"accuracy\", float(accuracy))\n \
          \   outputs = NamedTuple('outputs', approval=bool)\n    approval_value =\
          \ threshold_check(float(accuracy), int(thresholds_dict['roc']))\n    return\
          \ outputs(approval_value)\n\n"
        image: python:3.10.7-slim
    exec-train-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_lr(features: Input[Dataset], model: Output[Model]):\n \
          \   '''train a LogisticRegression with default parameters'''\n    import\
          \ pandas as pd\n    from sklearn.linear_model import LogisticRegression\
          \        \n    import pickle \n\n    data = pd.read_csv(features.path+\"\
          .csv\")\n    model_lr = LogisticRegression()\n    model_lr.fit(data.drop('class',axis=1),\
          \ data['class'])\n    model.metadata[\"framework\"] = \"LR\"\n    file_name\
          \ = model.path + f\".pkl\"\n    with open(file_name, 'wb') as file:  \n\
          \        pickle.dump(model_lr, file)   \n\n"
        image: python:3.10.7-slim
    exec-train-test-split:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_test_split
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_test_split(dataset: Input[Dataset], dataset_train: Output[Dataset],\
          \ dataset_test: Output[Dataset]):\n    '''train_test_split'''\n    import\
          \ pandas as pd\n    import logging \n    import sys\n    from sklearn.model_selection\
          \ import train_test_split as tts\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO) \n\n    alldata = pd.read_csv(dataset.path, index_col=None)\n\
          \    train, test = tts(alldata, test_size=0.3)\n    train.to_csv(dataset_train.path\
          \ + \".csv\" , index=False, encoding='utf-8-sig')\n    test.to_csv(dataset_test.path\
          \ + \".csv\" , index=False, encoding='utf-8-sig')\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob('model.pkl')\n    source_file_name= model.path +\
          \ '.pkl'\n\n    blob.upload_from_filename(source_file_name)    \n\n    print(f\"\
          File {source_file_name} uploaded to {model_repo}.\")\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  name: diabetes-predictor-training-pipeline
root:
  dag:
    outputs:
      artifacts:
        lr-model-evaluation-kpi:
          artifactSelectors:
          - outputArtifactKey: kpi
            producerSubtask: lr-model-evaluation
        lr-model-evaluation-metrics:
          artifactSelectors:
          - outputArtifactKey: metrics
            producerSubtask: lr-model-evaluation
    tasks:
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - lr-model-evaluation
        - train-lr
        inputs:
          artifacts:
            pipelinechannel--train-lr-model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-lr
          parameters:
            pipelinechannel--lr-model-evaluation-approval:
              taskOutputParameter:
                outputParameterKey: approval
                producerTask: lr-model-evaluation
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: approve-model
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--lr-model-evaluation-approval']
            == true
      importer:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-importer
        inputs:
          parameters:
            uri:
              componentInputParameter: dataset_uri
        taskInfo:
          name: importer
      lr-model-evaluation:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-lr-model-evaluation
        dependentTasks:
        - train-lr
        - train-test-split
        inputs:
          artifacts:
            model_lr:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-lr
            test_set:
              taskOutputArtifact:
                outputArtifactKey: dataset_test
                producerTask: train-test-split
          parameters:
            thresholds_dict_str:
              componentInputParameter: thresholds_dict_str
        taskInfo:
          name: lr-model-evaluation
      train-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-lr
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: dataset_train
                producerTask: train-test-split
        taskInfo:
          name: train-lr
      train-test-split:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-test-split
        dependentTasks:
        - importer
        inputs:
          artifacts:
            dataset:
              taskOutputArtifact:
                outputArtifactKey: artifact
                producerTask: importer
        taskInfo:
          name: train-test-split
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      dataset_uri:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      project_id:
        parameterType: STRING
      thresholds_dict_str:
        parameterType: STRING
  outputDefinitions:
    artifacts:
      lr-model-evaluation-kpi:
        artifactType:
          schemaTitle: system.Metrics
          schemaVersion: 0.0.1
      lr-model-evaluation-metrics:
        artifactType:
          schemaTitle: system.ClassificationMetrics
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.3.0
